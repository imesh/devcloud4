# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = '2'

Vagrant.require_version '>= 1.5.0'

unless Vagrant.has_plugin?('vagrant-librarian-chef')
  raise 'vagrant-librarian-chef is not installed!'
end

unless Vagrant.has_plugin?('vagrant-omnibus')
  raise 'vagrant-omnibus is not installed!'
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  is_windows = (RUBY_PLATFORM =~ /mswin|mingw|cygwin/)

  config.vm.define 'xenserver' do |xenserver|
    xenserver.vm.box = 'duffy/xenserver'

    # Public Network (IP address is ignored.)
    xenserver.vm.network :private_network, :auto_config => false, :ip => '192.168.23.10'

    # Guest Network (IP address is ignored.)
    xenserver.vm.network :private_network, :auto_config => false, :ip => '192.168.24.10'

    # Configure Interfaces
    if is_windows
      ## Configure Management Interface
      xenserver.vm.provision 'shell' do |s|
        s.path = '..\common\xenserver\configure-network.sh'
        s.args = %w(eth1 192.168.22.10 255.255.255.0 MGMT)
      end

      ## Configure Public Interface
      xenserver.vm.provision 'shell' do |s|
        s.path = '..\common\xenserver\configure-network.sh'
        s.args = %w(eth2 na na PUBLIC)
      end

      ## Configure Guest Interface
      xenserver.vm.provision 'shell' do |s|
        s.path = '..\common\xenserver\configure-network.sh'
        s.args = %w(eth3 na na GUEST)
      end

      ## Map host only networks and the adapters
      xenserver.vm.provider 'virtualbox' do |v|
        v.customize ['modifyvm', :id, '--memory', 5120]
        v.customize ['modifyvm', :id, '--cpus', 8]
        v.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']
        v.customize ['modifyvm', :id, '--nicpromisc3', 'allow-all']
        v.customize ['modifyvm', :id, '--nicpromisc4', 'allow-all']
        v.customize ['modifyvm', :id, '--hostonlyadapter2', 'VirtualBox Host-Only Ethernet Adapter']
        v.customize ['modifyvm', :id, '--hostonlyadapter3', 'VirtualBox Host-Only Ethernet Adapter #2']
        v.customize ['modifyvm', :id, '--hostonlyadapter4', 'VirtualBox Host-Only Ethernet Adapter #3']
        v.customize ["modifyvm", :id, '--nictype2', 'Am79C973']
        v.customize ["modifyvm", :id, '--nictype3', 'Am79C973']
        v.customize ["modifyvm", :id, '--nictype4', 'Am79C973']
      end

    else
      ## Configure Management Interface
      xenserver.vm.provision 'shell' do |s|
        s.path = '../common/xenserver/configure-network.sh'
        s.args = %w(eth1 192.168.22.10 255.255.255.0 MGMT)
      end

      ## Configure Public Interface
      xenserver.vm.provision 'shell' do |s|
        s.path = '../common/xenserver/configure-network.sh'
        s.args = %w(eth2 na na PUBLIC)
      end

      ## Configure Guest Interface
      xenserver.vm.provision 'shell' do |s|
        s.path = '../common/xenserver/configure-network.sh'
        s.args = %w(eth3 na na GUEST)
      end

      ## Map host only networks and the adapters
      xenserver.vm.provider 'virtualbox' do |v|
        v.customize ['modifyvm', :id, '--memory', 5120]
        v.customize ['modifyvm', :id, '--cpus', 8]
        v.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']
        v.customize ['modifyvm', :id, '--nicpromisc3', 'allow-all']
        v.customize ['modifyvm', :id, '--nicpromisc4', 'allow-all']
        v.customize ['modifyvm', :id, '--hostonlyadapter2', 'vboxnet0']
        v.customize ['modifyvm', :id, '--hostonlyadapter3', 'vboxnet1']
        v.customize ['modifyvm', :id, '--hostonlyadapter4', 'vboxnet2']
        v.customize ["modifyvm", :id, '--nictype2', 'Am79C973']
        v.customize ["modifyvm", :id, '--nictype3', 'Am79C973']
        v.customize ["modifyvm", :id, '--nictype4', 'Am79C973']
      end

    end

    ## Tweak kernel
    xenserver.vm.provision "shell", inline: "sed -i -e 's/net.bridge.bridge-nf-call-iptables = 1/net.bridge.bridge-nf-call-iptables = 0/g' -e 's/net.bridge.bridge-nf-call-arptables = 1/net.bridge.bridge-nf-call-arptables = 0/g' /etc/sysctl.conf && /sbin/sysctl -p /etc/sysctl.conf"
  end

  config.vm.define 'management' do |management|
    management.vm.box = 'chef/centos-6.5'

    # Configure management interface
    management.vm.network :private_network, :auto_config => true, :ip => '192.168.22.5'

    # Configure public interface
    management.vm.network :private_network, :auto_config => true, :ip => '192.168.23.5'

    # Port forwards
    management.vm.network 'forwarded_port', guest: 3306, host: 3306
    management.vm.network 'forwarded_port', guest: 8080, host: 8080

    management.vm.provider 'virtualbox' do |v|
      v.customize ['modifyvm', :id, '--memory', 2048]
    end

    if is_windows
      management.vm.provider 'virtualbox' do |v|
        v.customize ['modifyvm', :id, '--memory', 512]
        v.customize ['modifyvm', :id, '--hostonlyadapter2', 'VirtualBox Host-Only Ethernet Adapter']
        v.customize ['modifyvm', :id, '--hostonlyadapter3', 'VirtualBox Host-Only Ethernet Adapter #2']
        v.customize ["modifyvm", :id, '--nictype2', 'Am79C973']
        v.customize ["modifyvm", :id, '--nictype3', 'Am79C973']
      end
      management.librarian_chef.cheffile_dir = '..\common\management'
    else
      management.vm.provider 'virtualbox' do |v|
        v.customize ['modifyvm', :id, '--memory', 512]
        v.customize ['modifyvm', :id, '--hostonlyadapter2', 'vboxnet0']
        v.customize ['modifyvm', :id, '--hostonlyadapter3', 'vboxnet1']
        v.customize ["modifyvm", :id, '--nictype2', 'Am79C973']
        v.customize ["modifyvm", :id, '--nictype3', 'Am79C973']
      end
      management.librarian_chef.cheffile_dir = '../common/management'
    end

    management.omnibus.chef_version = "11.16.0"

    management.vm.provision 'chef_solo' do |chef|
      if is_windows
        chef.cookbooks_path = ['..\common\management\cookbooks']
      else
        chef.cookbooks_path = ['../common/management/cookbooks']
      end

      chef.run_list = [
        'recipe[nat-router]',
        'recipe[cloudstack::management-server]'
      ]

      chef.json = {
          'iptables' => {
              'lans' => %w(eth1 eth2)
          }
      }
    end
  end
end
